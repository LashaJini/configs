# extends javascript
snippet catch "Snippet: .catch((...) => ...)"
.catch((${1}) => ${2})${0}
endsnippet

snippet then "Snippet: .then((...) => ...)"
.then((${1}) => ${2})${0}
endsnippet

snippet dc "Snippet: data-cy={...}"
data-cy={process.env.NODE_ENV === "development" ? "${1}" : undefined}${0}
endsnippet

snippet h "Snippet: const h = () => "
const ${1:handler} = ${2} (${3}) => ${0}
endsnippet

snippet ar "Snippet: () =>"
(${1}) => ${0}
endsnippet

snippet doc "Snippet: simple doc comment"
/**
 * ${1}
 */
endsnippet

snippet dest "Snippet: const {...} = ..."
const {${1}} = ${2}
endsnippet

snippet bc "Add block comment"
/** $1 */
endsnippet

snippet todo "TODO snippet"
// TODO: ${1}
endsnippet

snippet docs "This is a doc snippet"
/**
 * @author `echo $(git config --list | grep user.name | cut -d "=" -f 2)`
 * @time `!v strftime("%c")`
 *
 * $2
 */
endsnippet

snippet cer "Console error snippet"
console.error(${1:text})${0}
endsnippet	

snippet clog "Console log snippet"
console.log(${1:text})${0}
endsnippet	

snippet ec "Snippet: export const"
export const ${1:NAME} = "${2}";
endsnippet

snippet styled "Snippet: styled.div``"
const ${1:Div} = styled.${2:div}\`
${0}
\`
endsnippet

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# React Stuff
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

snippet effect "Snippet: React.useEffect"
React.useEffect(() => {
	${1}
}, [${2}])
endsnippet

snippet rc "Create React class Component"
import React, { Component } from 'react';

class `!v expand('%:t:r')` extends Component {
	render() {
		return (
			${1:<></>}
		)
	}
}

export default `!v expand('%:t:r')`;
endsnippet	

snippet rcws "Create React class Component with State"
import React, { Component } from 'react';

interface ${1:Props} {};
interface ${2:IState} {
	${3:value}: ${4:string},
}

class `!v expand('%:t:r')` extends Component<$1, $2> {
	constructor(props: $1) {
		super(props);

		this.state = {
			$3: '',
		}
	}

	render() {
		return <></>;
	}
}

export default `!v expand('%:t:r')`;
endsnippet	

snippet rcwp "Create React class Component with Props"
import React, { Component } from 'react';

interface ${1:Props} {
	${2:value}: ${3:string},
}

class `!v expand('%:t:r')` extends Component<$1> {
	render() {
		return <></>;
	}
}

export default `!v expand('%:t:r')`;
endsnippet	

snippet rnf "Snippet: create react named function component"
import React from 'react';

const ${1:`!v expand('%:t:r')`} = (${2}) => {
	return (
		${3:<></>}
	)
}

export default $1;
endsnippet

snippet state "Snippet: React.useState"
const [$1, set${1/.*/\u$0/}] = React.useState${2}(${3:""})
endsnippet

snippet rf "Create React function Component"
import React from 'react';

const `!v expand('%:t:r')` = (${1}) => {
	return (
		${2:<></>}
	)
}

export default `!v expand('%:t:r')`;
endsnippet

snippet ref "Snippet: React.useRef"
const ${1} = React.useRef(${2})
endsnippet

snippet callback "Snippet: React.useCallback"
const ${1} = React.useCallback((${2}) => ${3}, [${4}])
endsnippet

snippet use "Snippet: use(SOMETHING) format"
const ${1} = use${2}(${3});
endsnippet
