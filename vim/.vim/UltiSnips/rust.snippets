snippet doclang "Snippet: codeblock in docs"
\`\`\`${1}
/// # fn main() {
/// ${2}
/// # }
/// \`\`\`
endsnippet

snippet bc "Snippet: /* */"
/* ${1} */
endsnippet

snippet rangeinc "Snippet: std::ops::RangeInclusive<usize>"
std::ops::RangeInclusive<${1:usize}>
endsnippet

snippet range "Snippet: std::ops::Range<usize>"
std::ops::Range<${1:usize}>
endsnippet

snippet max "Snippet: std::cmp::max"
std::cmp::max(${1}, ${2})
endsnippet

snippet min "Snippet: std::cmp::min"
std::cmp::min(${1}, ${2})
endsnippet

snippet ar "Snippet: |...|"
|${1:_}| ${2}
endsnippet

snippet ordering "Snippet: std::cmp::Ordering"
std::cmp::Ordering::${1}
endsnippet

snippet split "Snippet: split empty spaced string into vector of u32s."
${1:user_input}.split(${2:" "}).map(|x| x.trim().parse::<${3:u32}>().unwrap()).collect::<Vec<$3>>();
endsnippet

snippet parse "Snippet: parse string to u32"
${1:n}.trim().parse::${2:<u32>}().unwrap()
endsnippet

snippet path "Snippet: dashed file name to underscore named module"
#[path = "./${1}/${2}.rs"]
pub mod ${2/-/_/g};
endsnippet

snippet line "Snippet: read one line of user input"
let mut ${1:user_input} = String::new();
std::io::stdin()
	.read_line(&mut $1)
	.expect("failed to read line");
endsnippet

snippet map "Snippet: .map(...)"
.map(|${1:_}| ${2})
endsnippet

snippet main "main function"
fn main() {
	${0}
}
endsnippet

snippet let "let declaration"
let $1 = $2${3:;}
endsnippet

snippet letm "let mutable declaration"
let mut $1 = $2${3:;}
endsnippet

snippet fpr "snippet for println! with formatting"
println!("{${1:}}", $2)${3:;}
endsnippet

snippet efpr "snippet for eprintln! with formatting"
eprintln!("{${1:}}", $2)${3:;}
endsnippet

snippet pr "snippet for println!"
println!("${1}")${2:;}
endsnippet

snippet format "snippet for format!"
format!("${1:{}}", $2)${3:;}
endsnippet
