snippet ob "Snippet: const ... = {...}"
const ${1} = {
	${0}
}
endsnippet

snippet $ "Snippet: ${...}"
${${1}}
endsnippet

snippet ec "Snippet: export const"
export const ${1:PORT} = ${2}
endsnippet

snippet htmltodo "This is a TODO reminder for HTML" b
<!-- TODO: `echo $USER` ${1:desc} | `!v strftime("%c")` -->
endsnippet
	
snippet jstodo "This is a TODO reminder for Js" b
/**
 * TODO:
 * @author `echo $(git config --list | grep user.name | cut -d "=" -f 2)`
 * @time `!v strftime("%c")`
 *
 * ${2:description}
 */
endsnippet

snippet clog "Snippet: console log"
console.log(${1:text})
endsnippet	

snippet cer "Snippet: console error"
console.error(${1:text})
endsnippet	

snippet clogsep "Console log separator"
console.log("--------------------------------------------------------------")
endsnippet

snippet bc "Snippet: block comment"
/* ${1} */
endsnippet
	
snippet reg "Js regex"
/$1/$2
endsnippet

snippet docs "This is a doc snippet"
/**
 * @author ${1:`echo $USER`}
 * @time `!v strftime("%c")`
 *
 * $2
 */
endsnippet

snippet for "Snippet: for loop"
for (let ${1:i} = ${2:0}; $1 < ${3:length}; $1${4:++}) {
	${5}
}
endsnippet

snippet req "Snippet: CommonJS require"
const ${1:http} = require("${2:$1}")
endsnippet

snippet mex "Snippet: CommonJS module exports"
module.exports = {
	${1}
}
endsnippet

snippet dmex "Snippet: CommonJS 'default' module exports"
module.exports = ${1}
endsnippet

snippet const "Snippet: const"
const ${1:elem} = ${2:1}
endsnippet

snippet imp "Snippet: ESM import"
import ${1:axios} from "${2:$1}"
endsnippet

snippet dex "Snippet: ESM default export"
export default $1
endsnippet

snippet f "Snippet: function expression"
const ${1:handler} = (${2}) => {
	${0}
}
endsnippet

snippet af "Snippet: async function expression"
const ${1:handler} = async (${2}) => {
	${0}
}
endsnippet

snippet aw "Snippet: await"
await ${1}
endsnippet

snippet caw "Snippet: const ... = await ..."
const ${1:response} = await ${2}
endsnippet

snippet dest "Snippet: destructure"
const { ${1} } = ${2}
endsnippet

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# React Stuff
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# React Class Component
snippet rc "Create React class Component"
import React, { Component } from 'react';

class `!v expand('%:t:r')` extends Component {
	render() {
		return (
			${1:<></>}
		)
	}
}

export default `!v expand('%:t:r')`;
endsnippet	

# React Function Component
snippet rf "Create React function Component"
import React from 'react';

const `!v expand('%:t:r')` = (${1}) => {
	return (
		${2:<></>}
	)
}

export default `!v expand('%:t:r')`;
endsnippet

# $1 = ${1/.*/\u$0/}.new
snippet state "Snippet: React.useState"
const [$1, set${1/.*/\u$0/}] = React.useState(${2:""})
endsnippet

snippet effect "Snippet: React.useEffect"
React.useEffect(() => {
	${1}
}, [${2}])
endsnippet

snippet =" "Snippet: name=''"
${1:className}="${2}"
endsnippet

snippet ={ "Snippet: name={}"
${1:onClick}={${2:handleClick}}
endsnippet

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# express
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

snippet get "Snippet: express get function"
${1:app}.get('/${2}', (request, response, ${3:next}) => {
	${4}
});
endsnippet

snippet aget "Snippet: async express get function"
${1:app}.get('/${2}', async (request, response, ${3:next}) => {
	${4}
});
endsnippet

snippet del "Snippet: express delete function"
${1:app}.delete('/${2}', (request, response, ${3:next}) => {
	${4}
});
endsnippet

snippet adel "Snippet: async express delete function"
${1:app}.delete('/${2}', async (request, response, ${3:next}) => {
	${4}
});
endsnippet

snippet post "Snippet: express post function"
${1:app}.post('/${2}', (request, response, ${3:next}) => {
	${4}
});
endsnippet

snippet apost "Snippet: async express post function"
${1:app}.post('/${2}', async (request, response, ${3:next}) => {
	${4}
});
endsnippet

snippet put "Snippet: express put function"
${1:app}.put('/${2}/:id', (request, response, ${3:next}) => {
	${4}
});
endsnippet

snippet aput "Snippet: async express put function"
${1:app}.put('/${2}/:id', async (request, response, ${3:next}) => {
	${4}
});
endsnippet

snippet mw "Snippet: middleware function"
const ${1:mw} = (request, response, ${2:next}) => {
	${3}
}
endsnippet

snippet emw "Snippet: error middleware function"
const ${1:emw} = (error, request, response, ${2:next}) => {
	${3}
}
endsnippet

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# jest, mocha(doesn't like arrows)
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

snippet descb "Snippet: describe...async beforeEach...async test" 
describe("${1}", function () {
	beforeEach(${2:async} function () {
		${3}
	})

	${4:test}("${5}", ${6:async} function () {
		${7}
	})
	
})
endsnippet

snippet desc "Snippet: async describe"
describe("${1}", function () {
	${2:test}("${3}", ${4:async} function () {
		${5}
	})
})
endsnippet

snippet test "Snippet: test"
test("${1}", function () {
	${2}
})
endsnippet

snippet it "Snippet: it"
it("${1}", function () {
	${2}
})
endsnippet

snippet atest "Snippet: async test"
test("${1}", async function () {
	${2}
})
endsnippet

snippet ait "Snippet: async it"
it("${1}", async function () {
	${2}
})
endsnippet

snippet ito "Snippet: it.only"
it.only("${1}", function() {
	${2}
})
endsnippet

snippet beach "Snippet: beforeEach"
beforeEach(function () {
	${1}
})
endsnippet

snippet ex2b "Snippet: expect..toBe"
expect(${1}).${2:toBe}(${3});
endsnippet

snippet all "Snippet: afterAll"
afterAll(() => {
	${0}
})
endsnippet
