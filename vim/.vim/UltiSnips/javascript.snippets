snippet ct "Snippet: console.time"
console.time${1}(${2})${0}
endsnippet

snippet o "Snippet: const obj = { ... }"
const ${1:response} = { ${0} }
endsnippet

snippet ael "Snippet: addEventListener"
${1:window}.addEventListener("${2:resize}", function(${3:event}) {
	${0}
})
endsnippet

snippet cn "Snippet: const ... = new ..."
const ${1:response} = new ${0}
endsnippet

snippet c "Snippet: const ... = ..."
const ${1:response} = ${0}
endsnippet

snippet dqs "Snippet: document.querySelector"
document.querySelector(${2})${0}
endsnippet

snippet div "Snippet: divider"
/*******************************************************************************
 *
 * ${0}
 *
 ******************************************************************************/
endsnippet

snippet max "Snippet: Math.max"
Math.max(${1}, ${2})${0}
endsnippet

snippet min "Snippet: Math.min"
Math.min(${1}, ${2})${0}
endsnippet

snippet dc "Snippet: data-cy={...}"
data-cy={process.env.NODE_ENV === "development" ? "${1}" : undefined}${0}
endsnippet

snippet styled "Snippet: const NAME = styled.div``"
const ${1:Div} = styled.${2:div}\`
${3}
\`
endsnippet

snippet gen "Snippet: function* foo()..."
function* ${1:gen}(${2}) {
	${3}
}
endsnippet

snippet devlog "Snippet: if (__DEV__) console.log(...)"
if (process.env.NODE_ENV === "development") console.log(${1})
endsnippet

snippet catch "Snippet: .catch((...) => ...)"
.catch((${1}) => ${2})
endsnippet

snippet then "Snippet: .then((...) => ...)"
.then((${1}) => ${2})
endsnippet

snippet swap "Snippet: [A[i], A[j]] = [A[j], A[i]]"
[${1:A}[${2:i}], $1[${3:j}]] = [$1[$3], $1[$2]]
endsnippet

snippet cl "Snippet: const ... = new ...()"
const ${1} = new ${2:Array}(${3})
endsnippet

snippet ar "Snippet: () => ..."
(${1}) => ${2}
endsnippet

snippet ob "Snippet: const ... = {...}"
const ${1} = {
	${0}
}
endsnippet

snippet $ "Snippet: ${...}"
${${1}}
endsnippet

snippet exc "Snippet: export const"
export const ${1:PORT} = ${2}
endsnippet

snippet htmltodo "This is a TODO reminder for HTML" b
<!-- TODO: `echo $USER` ${1:desc} | `!v strftime("%c")` -->
endsnippet
	
snippet jstodo "This is a TODO reminder for Js" b
/**
 * TODO:
 * @author `echo $(git config --list | grep user.name | cut -d "=" -f 2)`
 * @time `!v strftime("%c")`
 *
 * ${2:description}
 */
endsnippet

snippet cass "Snippet: console assert"
console.assert(${1:assertion})
endsnippet

snippet clog "Snippet: console log"
console.log(${1:text})
endsnippet	

snippet cer "Snippet: console error"
console.error(${1:text})
endsnippet	

snippet cwa "Snippet: console warn"
console.warn(${1:text})
endsnippet	


snippet clogsep "Console log separator"
console.log("--------------------------------------------------------------")
endsnippet

snippet bc "Snippet: block comment"
/* ${1} */
endsnippet
	
snippet reg "Js regex"
/$1/$2
endsnippet

snippet doc "Snippet: simple doc comment"
/**
 * ${1}
 */
endsnippet

snippet docs "This is a doc snippet"
/**
 * @author ${1:`echo $USER`}
 * @time `!v strftime("%c")`
 *
 * $2
 */
endsnippet

snippet for "Snippet: for loop"
for (let ${1:i} = ${2:0}; $1 < ${3:length}; $1${4:++}) {
	${5}
}
endsnippet

snippet forr "Snippet: reverse for loop"
for (let ${1:i} = ${2:length-1}; $1 >= ${3:0}; $1${4:--}) {
	${5}
}
endsnippet


snippet req "Snippet: CommonJS require"
const ${1:http} = require("${2:$1}")
endsnippet

snippet mes "Snippet: CommonJS module exports"
module.exports = ${1}
endsnippet

snippet const "Snippet: const"
const ${1:elem} = ${2:1}
endsnippet

snippet imp "Snippet: ESM import"
import $1 from "${2:${1/.*/\l$0/}}"
endsnippet

snippet dimp "Snippet: ESM import destructured"
import {$1} from "${2:${1/.*/\l$0/}}"
endsnippet

snippet dex "Snippet: ESM default export"
export default $1
endsnippet

snippet f "Snippet: function expression"
const ${1:curry} = (${2}) => ${3}
endsnippet

snippet h "Snippet: function expression with braces"
const ${1:handler} = ${2} (${3}) => {
	${0}
}
endsnippet

snippet aw "Snippet: await"
await ${1}
endsnippet

snippet caw "Snippet: const ... = await ..."
const ${1:response} = await ${2}
endsnippet

snippet dest "Snippet: destructure"
const { ${1} } = ${2}
endsnippet

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# React Stuff
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

snippet stl "Snippet: ${({...}) => ...}"
${({${1}}) => ${2}}
endsnippet

snippet use "Snippet: use(SOMETHING) format"
const ${1} = use${2}(${3});
endsnippet

snippet act "Snippet: act"
act(function () {
	${1}
})
endsnippet

snippet aact "Snippet: async act"
act(async function () {
	${1}
})
endsnippet


# React Class Component
snippet rc "Create React class Component"
import React, { Component } from 'react';

class `!v expand('%:t:r')` extends Component {
	render() {
		return (
			${1:<></>}
		)
	}
}

export default `!v expand('%:t:r')`;
endsnippet	

# React Function Component
snippet rf "Create React function Component"
import React from 'react';

const `!v expand('%:t:r')` = (${1}) => {
	return (
		${2:<></>}
	)
}

export default `!v expand('%:t:r')`;
endsnippet

snippet context "Snippet: const ... = React.useContext(...)"
const ${1} = React.useContext(${2})
endsnippet

# $1 = ${1/.*/\u$0/}.new
snippet state "Snippet: React.useState"
const [$1, set${1/.*/\u$0/}] = React.useState(${2:""})
endsnippet

snippet effect "Snippet: React.useEffect"
React.useEffect(() => {
	${1}
}, [${2}])
endsnippet

snippet ref "Snippet: React.useRef"
const ${1} = React.useRef(${2})
endsnippet

snippet memo "Snippet: React.useMemo"
const ${1} = React.useMemo(${2})
endsnippet

snippet callback "Snippet: React.useCallback"
const ${1} = React.useCallback((${2}) => ${3}, [${4}])
endsnippet

snippet reducer "Snippet: React.useReducer"
const [state, dispatch] = React.useReducer(${1:reducer}, ${2:initialState})
endsnippet

snippet =" "Snippet: name=''"
${1:className}="${2}"
endsnippet

# snippet ={ "Snippet: name={}"
snippet eqc "Snippet: onClick={handleClick}"
${1:onClick}={${2:handleClick}}
endsnippet

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# express
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

snippet get "Snippet: express get function"
${1:app}.get('/${2}', ${3} (request, response, ${4:next}) => {
	${5}
});
endsnippet

snippet del "Snippet: express delete function"
${1:app}.delete('/${2}', ${3} (request, response, ${4:next}) => {
	${5}
});
endsnippet

snippet post "Snippet: express post function"
${1:app}.post('/${2}', ${3} (request, response, ${4:next}) => {
	${5}
});
endsnippet

snippet put "Snippet: express put function"
${1:app}.put('/:id', ${2} (request, response, ${3:next}) => {
	${4}
});
endsnippet

snippet mw "Snippet: middleware function"
const ${1:mw} = (request, response, ${2:next}) => {
	${3}
}
endsnippet

snippet emw "Snippet: error middleware function"
const ${1:emw} = (error, request, response, ${2:next}) => {
	${3}
}
endsnippet

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# jest, mocha(doesn't like arrows)
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

snippet ball "Snippet: beforeAll"
beforeAll(${1} function() {
	${2}
})
endsnippet

snippet descb "Snippet: describe...async beforeEach...async test" 
describe("${1}", function () {
	beforeEach(${2:async} function () {
		${3}
	})

	${4:test}("${5}", ${6:async} function () {
		${7}
	})
	
})
endsnippet

snippet desc "Snippet: describe"
describe("${1}", function () {
	${2}
})
endsnippet

snippet test "Snippet: test"
test("${1}", ${2} function () {
	${3}
})
endsnippet

snippet it "Snippet: it"
it("${1}", ${2} function () {
	${3}
})
endsnippet

snippet ito "Snippet: it.only"
it.only("${1}", function() {
	${2}
})
endsnippet

snippet beach "Snippet: beforeEach"
beforeEach(${1} function () {
	${2}
})
endsnippet

snippet ex2b "Snippet: expect..toBe"
expect(${1:expected}).${2:toBe}(${3:result})
endsnippet

snippet ex2h "Snippet: expect..toHave..."
expect(${1}).toHave${2}(${3})
endsnippet

snippet aall "Snippet: afterAll"
afterAll(() => {
	${1}
})
endsnippet

snippet aeach "Snippet: afterEach"
afterEach(function () {
	${1}
})
endsnippet


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# gql
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

snippet gql "Snippet: const ... = gql`...`"
const ${1} = gql\`
	${0}
\`
endsnippet

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# three js
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

snippet 3 "Snippet: THREE...."
THREE.${2:Mesh}(${3})
endsnippet

snippet 3setup "Snippet: THREE js setup"
import * as THREE from "three";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
import * as dat from "dat.gui";

document.querySelector("body").style.cssText = \`
  margin:0;
  padding:0;
\`;

export default function init() {
  const canvas = document.querySelector(".scene");
  const size = { width: window.innerWidth, height: window.innerHeight };
  const gui = new dat.GUI({ width: 300, closed: true });

  window.addEventListener("resize", () => {
    size.width = window.innerWidth;
    size.height = window.innerHeight;

    camera.aspect = size.width / size.height;
    camera.updateProjectionMatrix();

    renderer.setSize(size.width, size.height);
  });

  const scene = new THREE.Scene();
  window.scene = scene;

  const axes = new THREE.AxesHelper(2);
  scene.add(axes);

  //////////////
  //  Camera  //
  //////////////

  const fov = 45;
  const aspectRatio = size.width / size.height;
  const camera = new THREE.PerspectiveCamera(fov, aspectRatio, 0.01, 100);
  camera.position.set(-3, 3, 3);
  scene.add(camera);

  ////////////////
  //  Controls  //
  ////////////////

  const controls = new OrbitControls(camera, canvas);
  controls.enableDamping = true;

  //////////////
  //  Meshes  //
  //////////////

  scene.add(
    new THREE.Mesh(
      new THREE.BoxGeometry(1, 1, 1),
      new THREE.MeshBasicMaterial()
    )
  );

  ////////////////
  //  Renderer  //
  ////////////////

  const renderer = new THREE.WebGLRenderer({ canvas });
  renderer.setSize(size.width, size.height);

  let lastTime = performance.now();
  const tick = (currTime) => {
    const delta = currTime - lastTime;
    if (delta >= 16) {
      controls.update();
      renderer.render(scene, camera);
      lastTime = currTime;
    }

    requestAnimationFrame(tick);
  };
  tick();
}
endsnippet

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# eslint
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

snippet esdnl "Snippet: // eslint-disable-next-line"
// eslint-disable-next-line
endsnippet
